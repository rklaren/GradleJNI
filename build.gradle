
apply plugin: 'java'
apply plugin: 'cpp-lib'
apply plugin: 'eclipse'
apply plugin: 'project-report'

version = '1.0'

sourceCompatibility = 1.7
targetCompatibility = 1.7

[compileJava, compileTestJava]*.options.collect {options -> options.encoding = 'UTF-8'}

def javaHome = System.getenv('JAVA_HOME')

libraries {
	main {
		spec { 
			args '-W', '-Wall', '-Wextra', 
					'-static-libgcc', 				// static link libgcc so everything is standalone
					'-Wl,--add-stdcall-alias',		// ensure symbols can be found
			 		"-I${javaHome}/include", "-I${javaHome}/include/win32",	// ugly have to include two directories depending on os 
					"-I${buildDir}/generated"
			outputFileName = 'foo.dll'
		}
	}
}

// must be same as the logic that loads the library from the jar
String osName = System.getProperty("os.name");
if(osName.toLowerCase().matches(".*windows.*")) osName = "Windows"
String osArch = System.getProperty("os.arch");

jar {
	into("lib/${osName}-${osArch}", { from(libraries.main.spec.outputFile) })

	manifest {
		attributes 'Main-Class': 'eu.knightswhosay.demo.gradlejni.JNIFoo'
	}
}

// hack..
task javah {
	// I guess this can be done a bit neater...
	String inputClass = 'eu.knightswhosay.demo.gradlejni.JNIFoo';
	String inputClassPath = inputClass.replaceAll('\\.', '/')+".class"
	String outputFile = "${buildDir}/generated/JNIFoo.h"
	inputs.file sourceSets.main.output.asFileTree.matching {
		include inputClassPath
	}
	outputs.file outputFile
	doLast {
		ant.javah(class: inputClass, outputFile: outputFile, classpath:sourceSets.main.output.asPath)
	}
}

// before we can compile javah must have built the header
compileMain.dependsOn javah

task wrapper(type: Wrapper) {
	gradleVersion = '1.3'
}
